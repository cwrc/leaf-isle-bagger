# A sample environment file


#---------------------------------
# Provide environment variables for configuring docker-compose, *not* the
# containers themselves.
#---------------------------------

# Note that this is simple string assignment, quotes should *not* be used.
# Multiple lines or commands, or bash syntax will not work.
#
# References:
# - https://docs.docker.com/compose/env-file/
# - https://docs.docker.com/compose/reference/envvars/
COMPOSE_PROJECT_NAME=leaf

# Use buildkit when building images.
COMPOSE_DOCKER_CLI_BUILD=1
DOCKER_BUILDKIT=1

# Required for traefik on OSX (inconsistent behavior).
DOCKER_CLIENT_TIMEOUT=120
COMPOSE_HTTP_TIMEOUT=120

# The consistency requirements for bind mounts; one of:
#
# - consistent: Full consistency. The container runtime and the host maintain an identical view of the mount at all times.
# - cached:     The host's view of the mount is authoritative. There may be delays before updates made on the host are visible within a container.
# - delegated:  The container runtime's view of the mount is authoritative. There may be delays before updates made in a container are visible on the host.
#
# Note that using 'consistent' can be very slow.
CONSISTENCY=delegated

# Chain docker-compose.yml files
COMPOSE_PATH_SEPARATOR=:
COMPOSE_FILE=docker-compose.bagger.yml

# -----------------------------
# Bagger
# -----------------------------

# Bagger integration - BAGGER_DRUPAL_URL
SITE=https://islandora.dev

# Environment for the Islandora Bagger container
BAGGER_REPOSITORY=ghcr.io/cwrc
BAGGER_TAG=local

# Update Islandora REST endpoint and register bag creation
# This tells Islandora Bagger to send a REST request to islandora_bagger_integration module
# to register the creation of the Bag. To configure this module to accept these requests,            # you must enable the REST endpoint as per <https://github.com/cwrc/islandora_bagger_integration#the-bag-log>
BAGGER_DEFAULT_PER_BAG_REGISTER_BAGS_WITH_ISLANDORA=false

#
BAGGER_OUTPUT_DIR=/data/aip
# if using bind mounts to a specific local volume instead
# LOCAL_AIP_DIR=

# automated job to run archival information package creation script
BAGGER_CROND_ENABLE_SERVICE=true
BAGGER_CROND_SCHEDULE="13 1 * * *"

# Islandora-bagger settings for archival information package creation
BAGGER_DEFAULT_PER_BAG_CONTACT_NAME="Canadian Writing Research Collabratory (CWRC)"
BAGGER_DEFAULT_PER_BAG_CONTACT_EMAIL="cwrc@cwrc.ca"
BAGGER_DEFAULT_PER_BAG_SOURCE_ORGANIZATION="Canadian Writing Research Collabratory (CWRC)"

LEAF_BAGGER_OUTPUT_DIR=/data/leaf-bagger
LEAF_BAGGER_AUDIT_OUTPUT_DIR=/data/leaf-bagger

# Sliding window of time in LEAF Bagger to find preservation candidates (sec - 86400 sec per day)
# 2678400: Bag everything changed in the last 31 days
LEAF_BAGGER_CROND_DATE_WINDOW=2678400

# -----------------------------
# Swift
# -----------------------------

OS_CONTAINER=cwrc-test

# From the OpenStack downloadable RC file

#!/usr/bin/env bash
# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 3 *Identity API* does not necessarily mean any other
# OpenStack API is version 3. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.

OS_AUTH_URL=

# With the addition of Keystone we have standardized on the term **project**
# as the entity that owns the resources.
OS_PROJECT_ID=
OS_PROJECT_NAME=
OS_USER_DOMAIN_NAME=
OS_PROJECT_DOMAIN_ID=

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
OS_USERNAME=

# Linked outside env (e.g., docker-compose secrets)
# With Keystone you pass the keystone password.
#echo "Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: "
#read -sr OS_PASSWORD_INPUT
#export OS_PASSWORD=$OS_PASSWORD_INPUT

# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
OS_REGION_NAME=

# Don't leave a blank variable, unset it if it was empty
#if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

OS_INTERFACE=public
OS_IDENTITY_API_VERSION=3



